{"version":3,"sources":["Search Algorithm/Movie_searchAlg.js"],"names":["__webpack_exports__","input","numOfSuggestions","console","log","fetch","headers","authorization","then","res","json","data","checkForSuggestions","undefined","suggestions","addSuggestion","_len2","arguments","length","args","Array","_key2","_len","_key","i","toString","concat","apply","uniqueID","isYear","hasContent","checkNumOfKeys","randomNum","random","obj","maxLength","Object","keys","min","max","Math","round","test","text","content","RegExp","id","key","_this"],"mappings":"6GACeA,EAAA,iBAACC,EAAOC,GAEnB,OADAC,QAAQC,IAAI,MAAOH,GACZI,MAAM,gEAAgEJ,EAAO,CACpFK,QAAS,CACLC,cAAiB,0CAEpBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIC,EAAoBD,EAAMV,EAAOC,MAGnD,IAAMU,EAAsB,SAACD,EAAMV,EAAOC,GAEtC,QAAaW,IAATF,IAAuBV,GAAmB,KAAVA,EAAc,OAAO,EAEzD,IAAIa,EAAc,GASZC,EAAgB,WAAa,QAAAC,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GAC/B,GAPsB,WAAa,QAAAC,EAAAL,UAAAC,OAATC,EAAS,IAAAC,MAAAE,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAATJ,EAASI,GAAAN,UAAAM,GACnC,IAAK,IAAIC,KAAKV,EACZ,GAAIA,EAAYU,GAAGC,aAAe,GAAAC,OAAIP,GAAMM,WAAY,OAAO,EAC/D,OAAO,GAIYE,WAAjB,EAAqBR,GAAO,OAAO,EACvCL,EAAYc,EAASd,IAArB,GAAAY,OAAyCP,IAGzCU,EAAO5B,IAAQc,EAAc,QAAS,OAAQd,GASlD,IAAK,IAAIuB,EAAI,EAAGA,EAAIb,EAAKO,OAAQM,IAAK,CAIlC,GAHIM,EAAW7B,EAAOU,EAAKa,GAAL,aAClBT,EAAc,QAASJ,EAAKa,GAAL,YAEvBO,EAAejB,EAAaZ,GAAmB,OAAOY,EAE1D,IAAIkB,EAAYC,EAAO,EAAItB,EAAKa,GAAL,WAAsBN,QAIjD,GAHIY,EAAW7B,EAAOU,EAAKa,GAAL,WAAsBQ,KACvCjB,EAAc,WAAYJ,EAAKa,GAAL,WAAsBQ,IAEjDD,EAAejB,EAAaZ,GAAmB,OAAOY,EAK1D,GAHIgB,EAAW7B,EAAOU,EAAKa,GAAL,UAClBT,EAAc,QAASJ,EAAKa,GAAL,QAAoBb,EAAKa,GAAL,WAA0Bb,EAAKa,GAAL,aAErEO,EAAejB,EAAaZ,GAAmB,OAAOY,EAK1D,GAHIgB,EAAW7B,EAAOU,EAAKa,GAAL,iBAClBT,EAAc,YAAaJ,EAAKa,GAAL,gBAE3BO,EAAejB,EAAaZ,GAAmB,OAAOY,EAK1D,GAHIgB,EAAW7B,EAAOU,EAAKa,GAAL,cAClBT,EAAc,QAASJ,EAAKa,GAAL,aAEvBO,EAAejB,EAAaZ,GAAmB,OAAOY,EAE9D,OAAOA,GAGLiB,EAAiB,SAACG,EAAKC,GAAN,OAAoBC,OAAOC,KAAKH,GAAKhB,QAAUiB,GAChEF,EAAS,SAACK,EAAKC,GAAN,OAAcC,KAAKC,MAAMH,EAAME,KAAKP,UAAUM,EAAID,KAC3DT,EAAS,SAAA5B,GAAK,MAAI,UAAUyC,KAAKzC,IAGjC6B,EAAa,SAACa,EAAMC,GAEtB,OADY,IAAIC,OAAOF,EAAM,MAChBD,KAAKE,IAIhBhB,EAAW,SAACM,GACd,IAAIY,EAAKb,EAAO,EAAG,IACnB,IAAK,IAAIc,KAAOb,EAASY,IAAOC,GAAKC,EAAKpB,WAC1C,OAAOkB","file":"static/js/9.b6cda794.chunk.js","sourcesContent":["// Fetch movie data with the \"multiple\" API call \r\nexport default (input, numOfSuggestions) => {\r\n    console.log(\"alg\", input);\r\n    return fetch('http://movie-quotes-app.herokuapp.com/api/v1/quotes?multiple='+input, {\r\n    headers: {\r\n        \"authorization\": \"Token token=1iVrE8HF2I6SHudxkWKJKQtt\"\r\n    }})\r\n    .then(res => res.json())\r\n    .then(data => checkForSuggestions(data, input, numOfSuggestions))\r\n}\r\n\r\nconst checkForSuggestions = (data, input, numOfSuggestions) => {\r\n    //Check for \"empty\"/undefined data\r\n    if (data === undefined || !input || input === \"\") return false;\r\n  \r\n    let suggestions = {};\r\n\r\n    // Returns true if duplicate is found in suggestions\r\n    const checkForDuplicate = (...args) => {\r\n        for (let i in suggestions) {\r\n          if (suggestions[i].toString() === [...args].toString()) return true;\r\n        } return false;\r\n    }\r\n    \r\n    const addSuggestion = (...args) => {\r\n        if (checkForDuplicate(...args)) return false;\r\n        suggestions[uniqueID(suggestions)] = [...args];\r\n    }\r\n\r\n    if (isYear(input)) addSuggestion(\"years\", \"Year\", input);\r\n    \r\n    /* \r\n    The different types of content that can be searched for.\r\n    - Syntax: [Typename, path to the actual value in data]\r\n    - Special syntax for Quotes: [Typename, path to quote, path to actor(author), path to movietitle] \r\n    */\r\n\r\n    // Find suggestions in data, number of suggestions limited to numOfSuggestions variable\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (hasContent(input, data[i][\"actor\"][\"name\"])) {\r\n            addSuggestion(\"Actor\", data[i][\"actor\"][\"name\"]);\r\n        } \r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n\r\n        let randomNum = random(0, (data[i][\"categories\"].length)); // Used for category\r\n        if (hasContent(input, data[i][\"categories\"][randomNum])) {\r\n             addSuggestion(\"Category\", data[i][\"categories\"][randomNum]);\r\n        }\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n\r\n        if (hasContent(input, data[i][\"content\"])) {\r\n            addSuggestion(\"Quote\", data[i][\"content\"], data[i][\"actor\"][\"name\"], data[i][\"movie\"][\"title\"]);\r\n        }\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n        \r\n        if (hasContent(input, data[i][\"character\"][\"name\"])) {\r\n            addSuggestion(\"Character\", data[i][\"character\"][\"name\"]);\r\n        }\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n         \r\n        if (hasContent(input, data[i][\"movie\"][\"title\"])) {\r\n            addSuggestion(\"Movie\", data[i][\"movie\"][\"title\"]);\r\n        }\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n    } \r\n    return suggestions;\r\n}\r\n\r\nconst checkNumOfKeys = (obj, maxLength) => Object.keys(obj).length >= maxLength;\r\nconst random = (min, max) => Math.round(min + Math.random()*(max-min));\r\nconst isYear = input => /^\\d{4}$/.test(input);\r\n\r\n// Check if content exist in text\r\nconst hasContent = (text, content) => {\r\n    let regex = new RegExp(text, 'ig');\r\n    return regex.test(content);\r\n}\r\n\r\n// Give each key a unique id to prevent overwriting content\r\nconst uniqueID = (obj) => {\r\n    let id = random(0, 36);\r\n    for (let key in obj) if (id === key) this.uniqueID(); // Recursive\r\n    return id;\r\n}\r\n"],"sourceRoot":""}