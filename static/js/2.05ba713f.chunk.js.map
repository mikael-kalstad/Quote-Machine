{"version":3,"sources":["Search Algorithm/Inspiration_searchAlg.js"],"names":["__webpack_exports__","input","numOfSuggestions","console","log","getSuggestions","data","Promise","resolve","reject","undefined","suggestions","addSuggestion","_len","arguments","length","args","Array","_key","checkForDuplicate","apply","uniqueID","concat","i","hasContent","checkNumOfKeys","obj","maxLength","Object","keys","_len2","_key2","toString","text","content","RegExp","test","min","max","id","Math","round","random","key","_this"],"mappings":"g6XAEeA,EAAA,iBAACC,EAAOC,GAEnB,OADAC,QAAQC,IAAIC,EAAeC,EAAML,EAAOC,IACjC,IAAIK,QAAQ,SAACC,EAASC,GACzBD,EAAQH,EAAeC,EAAML,EAAOC,OAI5C,IAAMG,EAAiB,SAACC,EAAML,EAAOC,GAEjC,QAAaQ,IAATJ,IAAuBL,GAAmB,KAAVA,EAAc,OAAO,EAQzD,IAPA,IAAIU,EAAc,GAEZC,EAAgB,WAAa,QAAAC,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GAC/B,GAAIC,EAAiBC,WAAjB,EAAqBJ,GAAO,OAAO,EACvCL,EAAYU,EAASV,IAArB,GAAAW,OAAyCN,IAGpCO,EAAI,EAAGA,EAAIjB,EAAKS,OAAQQ,IAAK,CAElC,GADIC,EAAWvB,EAAOK,EAAKiB,GAAL,SAAoBX,EAAc,SAAUN,EAAKiB,GAAL,QAC9DE,EAAed,EAAaT,GAAmB,OAAOS,EAG1D,GADIa,EAAWvB,EAAOK,EAAKiB,GAAL,QAAmBX,EAAc,QAASN,EAAKiB,GAAL,MAAkBjB,EAAKiB,GAAL,QAC9EE,EAAed,EAAaT,GAAmB,OAAOS,EAE9D,OAAOA,GAKLc,EAAiB,SAACC,EAAKC,GAAN,OAAoBC,OAAOC,KAAKH,GAAKX,QAAUY,GAGhER,EAAoB,SAACO,GAAiB,QAAAI,EAAAhB,UAAAC,OAATC,EAAS,IAAAC,MAAAa,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAATf,EAASe,EAAA,GAAAjB,UAAAiB,GACxC,IAAK,IAAIR,KAAKG,EACZ,GAAIA,EAAIH,GAAGS,aAAe,GAAAV,OAAIN,GAAMgB,WAAY,OAAO,GAKvDR,EAAa,SAACS,EAAMC,GAEtB,OADY,IAAIC,OAAOF,EAAM,MAChBG,KAAKF,IAIhBb,EAAW,SAACK,GACd,IAhBYW,EAAKC,EAgBbC,GAhBQF,EAgBI,EAhBCC,EAgBE,GAhBME,KAAKC,MAAMJ,EAAMG,KAAKE,UAAUJ,EAAID,KAiB7D,IAAK,IAAIM,KAAOjB,EAASa,IAAOI,GAAKC,EAAKvB,WAC1C,OAAOkB","file":"static/js/2.05ba713f.chunk.js","sourcesContent":["import data from 'API/Inspiration_data.json';\r\n\r\nexport default (input, numOfSuggestions) => {\r\n    console.log(getSuggestions(data, input, numOfSuggestions))\r\n    return new Promise((resolve, reject) => {\r\n        resolve(getSuggestions(data, input, numOfSuggestions));\r\n    })\r\n}\r\n\r\nconst getSuggestions = (data, input, numOfSuggestions) => {\r\n    //Check for \"empty\"/undefined data\r\n    if (data === undefined || !input || input === \"\") return false;\r\n    let suggestions = {};\r\n\r\n    const addSuggestion = (...args) => {\r\n        if (checkForDuplicate(...args)) return false;\r\n        suggestions[uniqueID(suggestions)] = [...args];\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (hasContent(input, data[i][\"author\"])) addSuggestion(\"Author\", data[i][\"author\"]);\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n        \r\n        if (hasContent(input, data[i][\"quote\"])) addSuggestion(\"Quote\", data[i][\"quote\"], data[i][\"author\"]);\r\n        if (checkNumOfKeys(suggestions, numOfSuggestions)) return suggestions;\r\n    }\r\n    return suggestions;\r\n}\r\n\r\n/* Helper functions */\r\n\r\nconst checkNumOfKeys = (obj, maxLength) => Object.keys(obj).length >= maxLength;\r\nconst random = (min, max) => Math.round(min + Math.random()*(max-min));\r\n\r\nconst checkForDuplicate = (obj, ...args) => {\r\n    for (let i in obj) {\r\n      if (obj[i].toString() === [...args].toString()) return true;\r\n    }\r\n}\r\n\r\n// Check if content exist in text\r\nconst hasContent = (text, content) => {\r\n    let regex = new RegExp(text, 'ig');\r\n    return regex.test(content);\r\n}\r\n\r\n// Give each key a unique id to prevent overwriting content\r\nconst uniqueID = (obj) => {\r\n    let id = random(0, 36);\r\n    for (let key in obj) if (id === key) this.uniqueID(); // Recursive\r\n    return id;\r\n}\r\n"],"sourceRoot":""}